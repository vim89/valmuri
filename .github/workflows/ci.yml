name: Build, Unit & Integration tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  workflow_call:

# Concurrency settings to prevent conflicts
concurrency:
  # For PRs, cancel duplicate runs. For pushes to main/master, queue them.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
  # Only cancel in-progress runs for pull requests, not for pushes to main/master
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # Quick checks that should fail fast
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'sbt'
      
      - uses: sbt/setup-sbt@v1
      
      - name: Check formatting
        run: sbt scalafmtCheckAll
      
      - name: Compile all Scala versions
        run: sbt +compile

  # Main test matrix
  test:
    name: Test
    needs: quick-checks
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        scala: [2.13.16, 3.7.1]
        java: [21]

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          cache: 'sbt'
      
      - name: Cache Coursier
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/coursier
            ~/.ivy2/cache
            ~/.sbt
          key: ${{ runner.os }}-sbt-${{ matrix.scala }}-${{ matrix.java }}-${{ hashFiles('**/build.sbt', '**/project/**.scala', '**/project/build.properties') }}
          restore-keys: |
            ${{ runner.os }}-sbt-${{ matrix.scala }}-${{ matrix.java }}-
            ${{ runner.os }}-sbt-${{ matrix.scala }}-
            ${{ runner.os }}-sbt-

      - name: Create test directories
        run: |
          mkdir -p scripts
          touch scripts/deploy.sh
          chmod +x scripts/deploy.sh

      - name: Run tests with timeout
        run: |
          export CI=true
          timeout 5m sbt ++${{ matrix.scala }} test || true

      - uses: sbt/setup-sbt@v1
      
      - name: Run tests
        run: sbt ++${{ matrix.scala }} test
      
      - name: Upload test reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.os }}-scala-${{ matrix.scala }}
          path: |
            **/target/test-reports/
            **/target/scala-${{ matrix.scala }}/test-reports/
          retention-days: 5


  # All tests must pass
  all-tests-pass:
    name: All Tests Pass
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Check all tests passed
        run: |
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Some tests failed"
            exit 1
          fi
          echo "All tests passed!"
